package jdiff;

import java.io.*;
import java.util.*;

/** 
 * Class to generate colored differences between two sections of HTML text.
 *
 * @author Matthew Doar, doar@pobox.com
 */
class Diff {

    /** 
     * Emit the differences between the two strings into the file
     * for the current package.
     * 
     * @param id A unique identifier for each documentation 
     *           change.
     */ 
    static String emitDocDiffs(String oldDoc, String newDoc, String id) {
        // Generate the string which will link to this set of diffs
        if (noDocDiffs)
            return "Documentation changed from ";
        if (oldDoc == null || newDoc == null) {
            return "Documentation changed from ";
        }

        if (diffFile == null) {
            // Create the name for the output file
            String fullReportFileName = HTMLReportGenerator.reportFileName;
            if (HTMLReportGenerator.outputDir != null)
                fullReportFileName = HTMLReportGenerator.outputDir + 
                    JDiff.DIR_SEP + 
                    HTMLReportGenerator.reportFileName;
            // Create the directory if it doesn't exist
            File opdir = new File(fullReportFileName);
            if (!opdir.mkdir() && !opdir.exists()) {
                System.out.println("Error: could not create the subdirectory '" + fullReportFileName + "'");
                System.exit(3);
            }
            String fullDiffFileName = fullReportFileName + 
                JDiff.DIR_SEP + diffFileName + 
                HTMLReportGenerator.reportFileExt;
            // Create the output file
            try {
                FileOutputStream fos = new FileOutputStream(fullDiffFileName);
                diffFile = new PrintWriter(fos);

                // Write the HTML header
                diffFile.println("<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0 Frameset//EN\"\"http://www.w3.org/TR/REC-html40/frameset.dtd\">");
                diffFile.println("<HTML>");
                diffFile.println("<HEAD>");
                diffFile.println("<meta name=\"generator\" content=\"JDiff v" + JDiff.version + "\">");
                diffFile.println("<!-- Generated by the JDiff JavaDoc doclet -->");
                diffFile.println("<!-- (" + JDiff.jDiffLocation + ") -->");
                diffFile.println("<!-- on " + new Date() + " -->");
                
                diffFile.println("<TITLE>");
                diffFile.println("Documentation Differences");
                diffFile.println("</TITLE>");
                
                diffFile.println("<center>");
                diffFile.println("<h1>");
                diffFile.println("Documentation Differences");
                diffFile.println("</h1>");
                diffFile.println("</center>");
                diffFile.println();
                diffFile.println("<blockquote>");
                diffFile.println("This file contains all the changes in documentation as colored differences.");
                diffFile.println("</blockquote>");
                diffFile.println();
                
            } catch(IOException e) {
                System.out.println("IO Error while attempting to create " + fullDiffFileName);
                System.out.println("Error: " + e.getMessage());
                System.exit(1);
            }
        }

        // Generate the differences
        generateDiffs(oldDoc, newDoc, id);
        diffFile.println("<hr>");

        return "Documentation <a href=\"" + diffFileName + 
            HTMLReportGenerator.reportFileExt + "#" + id + 
            "\">changed</a> from ";
    }
    
    /** 
     * Emit the HTML footer and close the diff file. 
     */
    public static void closeDiffFile() { 
        if (diffFile != null) {
            // Write the HTML footer
            diffFile.println();
            diffFile.println("</BODY>");
            diffFile.println("</HTML>");
            diffFile.close();
        }
    }

    /** 
     * Generate the differences. 
     *
     * The spaces between words are stripped here and reinserted during output,
     * after comparison. This only works in the parts of HTML which are 
     * insensitive to whether whitespace is one or more spaces.
     */
    static void generateDiffs(String oldDoc, String newDoc, String id) {
        // Convert the string to an array of strings
        String delimiters = " ";
        StringTokenizer st = new StringTokenizer(oldDoc, delimiters);
        List oldDocList = new ArrayList();
        while (st.hasMoreTokens()) {
            oldDocList.add(st.nextToken());
        }     
        String[] oldDocWords = new String[oldDocList.size()];
        oldDocWords = (String[])oldDocList.toArray(oldDocWords);
        
        // Convert the string to an array of strings
        st = new StringTokenizer(newDoc, delimiters);
        List newDocList = new ArrayList();
        while (st.hasMoreTokens()) {
            newDocList.add(st.nextToken());
        }     
        String[] newDocWords = new String[newDocList.size()];
        newDocWords = (String[])newDocList.toArray(newDocWords);
        
        DiffMyers diff = new DiffMyers(oldDocWords, newDocWords);
        DiffMyers.change script = diff.diff_2(false);
        diffFile.println("<A NAME=\"" + id + "\"></A><b>" + id + "</b><br><br>");
        writeDiffs(oldDocWords, newDocWords, script);
    }

    /** 
     * Write the differences to the diff file. The old documentation is 
     * edited using the edit script provided by the DiffMyers object.
     *
     * @param oldDocWords The original documentation as a String array,
     *        including whitespace.
     */
    static void writeDiffs(String[] oldDocWords, String[] newDocWords, 
                           DiffMyers.change script) {
        DiffMyers.change hunk = script;
        int startOld = 0;
        //DEBUG
/*
        System.out.println("Old Text:");
        for (int i = 0; i < oldDocWords.length; i++) {
          System.out.print(oldDocWords[i] + " ");
        }
        System.out.println(":END");
        System.out.println("New Text:");
        for (int i = 0; i < newDocWords.length; i++) {
          System.out.print(newDocWords[i] + " ");
        }
        System.out.println(":END");
*/
        //DEBUG
        for (; hunk != null; hunk = hunk.link) {
            int deletes = hunk.deleted;
            int inserts = hunk.inserted;
            if (deletes == 0 && inserts == 0) {
                continue; // Not clear how this would occur, but handle it
            }

            // Determine the range of word and delimiter numbers involved 
            // in each file.
            int first0 = hunk.line0; // Index of first deleted word
            // Index of last deleted word, invalid if deletes == 0
            int last0 = hunk.line0 + hunk.deleted - 1; 
            int first1 = hunk.line1; // Index of first inserted word
            // Index of last inserted word, invalid if inserts == 0
            int last1 = hunk.line1 + hunk.inserted - 1;
            
/*
            System.out.println("HUNK: "); //DEBUG
            System.out.println("inserts: " + inserts); //DEBUG
            System.out.println("deletes: " + deletes); //DEBUG
            System.out.println("first0: " + first0); //DEBUG
            System.out.println("last0: " + last0); //DEBUG
            System.out.println("first1: " + first1); //DEBUG
            System.out.println("last1: " + last1); //DEBUG
*/
            // Emit the original document up to this change
            for (int i = startOld; i < first0; i++) {
                diffFile.print(oldDocWords[i] + " ");
            }
            // Record where to start the next hunk from
            startOld = last0 + 1;
            // Emit the deleted words, but struck through
            if (deletes != 0) {
                diffFile.print("<strike>");
                for (int i = first0; i <= last0; i++) {
                    diffFile.print(oldDocWords[i] + " ");
                }
                diffFile.print("</strike>");
            }
            // Emit the inserted words in red
            if (inserts != 0) {
                diffFile.print("<font color=\"red\">");
//TODO yellow background                diffFile.print("<span style=\"bgcolor: yellow\">");
                for (int i = first1; i <= last1; i++) {
                    diffFile.print(newDocWords[i] + " ");
                }
//                diffFile.print("</span>");
                diffFile.print("</font>");
            }
        } //for (; hunk != null; hunk = hunk.link)
        // Print out the remaining part of the old text
        for (int i = startOld; i < oldDocWords.length; i++) {
            diffFile.print(oldDocWords[i] + " ");
        }
    }

    /** 
     * Current file where documentation differences are written as colored
     * differences.
     */
    public static PrintWriter diffFile = null;

    /** 
     * Base name of the current file where documentation differences are 
     * written as colored differences.
     */
    public static String diffFileName = "jdiff_docdiffs";

    /** 
     * If set, then do not generate colored diffs for documentation. 
     * Default is false.
     */
    public static boolean noDocDiffs = false;
        
}  
